//
// Metadata list
// --------------------------------------------------

.metadata-list {
	@include mouse-and-bp-up(md) {
		margin-top: 15px - 8px;
		margin-bottom: 15px - 7px;
	}

	.panel.editing & {
		@include touch-or-bp-down(sm) {
			margin-top: $form-group-margin-touch;
			margin-bottom: $form-group-margin-touch;
		}

		@include touch-and-bp-up(sm) {
			margin-left: $metadata-list-margin-x-touch;
			margin-right: $metadata-list-margin-x-touch;
		}
	}

	@include variant(".modal .metadata-list.editing") {
		html:not(.specifity) & {
			margin: ($form-group-margin-touch - $modal-inner-padding)
				(-$modal-inner-padding);
		}
	}

	.metadata {
		align-items: flex-start;

		@include bp-down(xs) {
			margin-bottom: $font-size-mobile / 2;
		}

		@include touch-or-bp-down(xs) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include bp-up(sm) {
			display: flex;
		}

		@include mouse-and-bp-up(sm) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $default-padding-x;
			padding-right: $default-padding-x;
		}

		@include bp-only(md) {
			padding-right: ($metadata-list-gutter + 1px);
		}

		&.empty,
		&.virtual {
			@include touch-or-bp-down(md) {
				@include state(".panel:not(.editing) .metadata-list") {
					display: none;
				}
			}

			.read-only & {
				display: none;
			}
		}

		&.dnd-source {
			opacity: 0;

			@include touch-or-bp-down(sm) {
				& + .metadata {
					padding-top: 0;
					margin-top: $input-border-width;

					&::before {
						content: none;
					}
				}
			}
		}

		// Edit mode
		@include state(".editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				display: flex;
				align-items: flex-start;
				position: relative;
				background-color: $input-bg;
				padding-top: $input-border-width;
				margin-bottom: 0;
				padding-left: $input-btn-padding-x-touch;
				padding-right: $input-btn-padding-x-touch;

				&::before,
				&::after {
					position: absolute;
					left: $default-padding-x-touch;
					right: 0;
					top: 0;
					height: $input-border-width;
					background: $input-border-color;
					z-index: 1;
				}

				&::before {
					content: "";
				}
			}

			&:first-child {
				@include variant("main .metadata-list") { // Exclude modals
					@include bp-up(sm) {
						padding-top: 0;
						border-top-left-radius: $input-border-radius;
						border-top-right-radius: $input-border-radius;
					}
				}

				&::before {
					@include bp-down-normalized(xs) {
						left: 0;
					}

					html:not(specifity) .modal & {
						left: 0;
					}

					@include variant("main .metadata-list") {
						@include bp-up(sm) {
							content: none;
						}
					}
				}
			}

			&:last-child {
				padding-bottom: $input-border-width;

				@include variant("main .metadata-list") {
					@include bp-up(sm) {
						padding-bottom: 0;
						border-bottom-left-radius: $input-border-radius;
						border-bottom-right-radius: $input-border-radius;
					}
				}

				&::after {
					@include bp-down-normalized(xs) {
						content: "";
						left: 0;
						top: auto;
						bottom: 0;
					}

					html:not(.specifity) .modal & {
						content: "";
						left: 0;
						top: auto;
						bottom: 0;
					}

					@include variant("main .metadata-list") {
						@include bp-up-normalized(sm) {
							content: none;
						}
					}
				}
			}

			// Editable focus state
			&:focus-within:not(.creators-entry) {
				.keyboard & {
					z-index: 2;

					&::before,
					&::after {
						content: "";
						position: absolute;
						left: 0;
						right: 0;
						height: $outline-width;
						background-color: $focus-color;
					}

					&::before {
						top: auto;
						bottom: calc(100% - #{$input-border-width});
					}

					&::after {
						top: 100%;
					}
				}
			}
		}
	}

	.touch-separated {
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				margin-bottom: $form-group-margin-touch;
			}

			@include bp-down(xs) {
				padding-bottom: $border-width;
			}

			.modal & {
				padding-bottom: $border-width;
			}

			@include variant("main .metadata-list") {
				@include touch-or-bp-up(sm) {
					border-bottom-left-radius: $input-btn-border-radius;
					border-bottom-right-radius: $input-btn-border-radius;
				}
			}

			&::after {
				@include bp-down-normalized(xs) {
					left: 0;
					top: auto;
					bottom: 0;
					content: "";
				}

				html:not(.specifity) .modal & {
					left: 0;
					top: auto;
					bottom: 0;
					content: "";
				}
			}

			& + .metadata {
				@include bp-down(xs) {
					padding-bottom: $border-width;
				}

				@include variant("main .metadata-list") {
					@include touch-and-bp-up(sm) {
						padding-top: 0;
						border-top-left-radius: $input-btn-border-radius;
						border-top-right-radius: $input-btn-border-radius;
					}
				}

				&::before {
					@include bp-down-normalized(xs) {
						left: 0;
					}

					.modal & {
						left: 0;
					}

					@include variant("main .metadata-list") {
						@include touch-and-bp-up(sm) {
							content: none;
						}
					}
				}

				&:focus-within {
					&::before {
						@include touch-keyboard-or-bp-down(sm) {
							content: "";
						}
					}
				}
			}
		}
	}

	.has-btn,
	.has-btn-icon {
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				padding-left: 0; // Keep vertical paddings
				padding-right: 0;

				.btn {
					padding: 0 $default-padding-x-touch;
					border: 0;
					width: 100%;
					text-align: left;
					color: $link-color;
					line-height: $line-height-large-touch;

					&:focus {
						outline: none;
						box-shadow: none;
					}

					&.btn-delete {
						color: $red;
					}
				}
			}

			&::before {
				@include touch-keyboard-or-bp-down(sm) {
					@include state(".touch-separated:focus-within") {
						left: 0;
					}
				}
			}
		}
	}

	.has-btn {
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			&::before {
				@include touch-or-bp-down(sm) {
					left: $default-padding-x-touch;
				}
			}

			.btn {
				background: transparent;
			}
		}
	}

	.has-btn-icon {
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			&::before {
				@include touch-or-bp-down(sm) {
					left: 2 * $default-padding-x-touch + $space-lg;
				}
			}

			.btn-icon {
				@include touch-or-bp-down(sm) {
					.icon {
						vertical-align: top;
						margin-top: ($line-height-large-touch - $space-lg) / 2;
						margin-right: $default-padding-x-touch;
					}
				}
			}
		}
	}

	a {
		color: inherit;
		text-decoration: none;
	}

	.key,
	.value {
		min-height: $metadata-list-line-height;
		overflow: visible;
		min-width: 0; // Fix truncation
		display: flex;

		@include bp-only(sm) {
			min-height: $metadata-list-line-height-sm;
		}

		@include touch-and-bp-up(md) {
			min-height: $metadata-list-line-height-sm;
		}

		// Edit mode
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				min-height: $line-height-large-touch;
			}
		}
	}

	.key {
		color: $key-color;
		margin-top: $space-xs;
		flex: 0 0 $metadata-list-offset;
		margin-top: 0;
		align-items: center;

		@include bp-up(sm) {
			justify-content: flex-end;
			padding-right: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-right: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				justify-content: flex-start;
				padding-right: 0;
			}
		}


		a[href]:hover {
			color: $link-color;
		}
	}

	.metadata:not(.interactable) .read-only .key {
		 // Allow click drag for text selection to start in labels except on clickable fields
		pointer-events: none;
	}

	label {
		@include text-truncate;
		line-height: normal; // Flex alignment is more stable
		user-select: none; // Reset

		&[for="url"] {
			overflow: inherit;
			text-overflow: inherit;
			white-space: inherit;
		}

		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				flex: 1 1 auto;
			}
		}

		> a {
			.icon {
				color: inherit;
			}

			@include mouse-and-bp-up(md) {
				vertical-align: middle;
			}
		}
	}

	.form-control {
		&:not(textarea) {
			line-height: normal;
		}

		&:focus {
			outline: none;
		}
	}

	.native-select-wrap {
		background-color: transparent;

		.form-control {
			background-color: transparent;
		}
	}

	.value {
		flex: 1 1 0;

		@include bp-up(sm) {
			display: flex;
			align-items: center;
			padding-left: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".panel.editing .metadata-list", ".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				padding-left: 0;
			}
		}

		// Standalone attachments
		a:hover {
			color: $link-color;
		}
	}

	@include mouse-and-bp-up(md) {
		.editable {
			&.textarea {
				margin-top: round(($metadata-list-line-height - $font-size-base * $line-height-base) / 2); // Align vertically with label
				margin-bottom: round(($metadata-list-line-height - $font-size-base * $line-height-base) / 2); // â€¦
			}
		}
	}
}
